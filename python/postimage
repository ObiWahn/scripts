#!/usr/bin/python3
#   -*- coding: utf-8 -*-
#
#   Author:   Jan Christoph Uhde < linux (a) obiwahn org>
#
#   Requires: urllib3       -
#             BeautifulSoup - http://www.crummy.com/software/BeautifulSoup/
#
#             Debian: apt-get install python-urllib3
#
help_str="""
postimage - file upload script for postimage.org

Synopsis:
    postimage [options] [filelist|-]
Options (not implemented):
    --help,  -h                      help -- this page
    --type=<type>,-t <type>          set type of returned link
                                     possible types: url, html, bbcode, bbcode2
    --nonames, -n                    disable printing of filenames
    --del, -d                        show url of upload deletion page
    --adult, -a                      flag upload as adult content
    --nolog                          disable logging to ~/.postimage.log
"""
#
#   TODO:
#   more structured use of exceptions
#   create logfile if it does not exist
#   put parser in function and pass options dict to main
#   resize option (this could be useful)
#   log into account (who needs that?!)
#

import sys
import os
import traceback
import getopt
import urllib3 as urllib
from bs4 import BeautifulSoup

from pprint import pprint  as P
from pprint import pformat as PF
import traceback
import argparse
import logging

parser = argparse.ArgumentParser()
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logfile=os.path.expanduser("~/.postimage.log")
http = urllib.PoolManager()

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

class Internal(Exception):
    def __init__(self, msg):
        self.msg = msg

class postimage_links(object):
    def __init__(self, full_path, noname=False, url = None, delete = None):
        self.full_path = full_path
        self.noname = noname
        self.url = url
        self.delete = delete
    def __str__(self):
        full_path = ""
        if not self.noname:
            full_path = self.full_path + ":\n"
        return  ( full_path  +
                  "url:   "  + str(self.url)   + "\n" +
                  "delete: " + str(self.delete) + "\n"
                )


def upload(file_list = None, content = None,
           adult_content = "no", link_type = "url",
           username = None, passwd = None):
    """
        file_list - files read from commandline
        content   - content of one file read from stdin
    """

    if not (file_list or content):
        return (None, None)

    if file_list and content:
        logger.error("you can not read from stdin and files")
        return (None, None)

    request_url = "http://www.postimage.org/index.php"
    multipart_dict={} #fields in urllib3 terms
    multipart_dict['adult'] = adult_content

    datagen=None
    headers=None

    # encode - data
    # for now the list may contain only one item
    if file_list:
        for image_file in file_list:
            with open(os.path.abspath(image_file), "rb") as fh:
                content = fh.read()
                multipart_dict['upload'] = (os.path.basename(image_file), content, 'image')

    else: #if content
        file_list = ['stdin']
        multipart_dict['upload'] = (image_file, content, 'image')

    #encode
    request = http.request('POST', request_url, fields=multipart_dict)
    reply = request.data

    # handle reply with soup
    soup = BeautifulSoup(reply)
    parsed_soup=soup.findAll("textarea")

    links = postimage_links(", ".join(file_list))
    links.url    = parsed_soup[0].string.strip()
    links.bbcode  = parsed_soup[1].string.strip()
    links.bbcode2 = parsed_soup[2].string.strip()
    links.html    = parsed_soup[3].string.strip()
    links.delete  = parsed_soup[4].string.strip()

    return links

def handle_post(links, nonames, nolog):
    if links.url:
        print(str(links))
        if not nolog:
            with open(logfile, 'a+') as f:
                f.write(str(links))
    else:
        raise Internal("Not all links could be retrieved after the upload")

def main(argv=None):
    parser.add_argument("--adult",    action = 'store_true', help = "contains adult content")
    parser.add_argument("--nolog",    action = 'store_true', help = "increase output verbosity" )
    parser.add_argument("--nonames",  action = 'store_true', help = "bla ...")
    parser.add_argument("--delete",   action = 'store_true', help = "bla ...")
    parser.add_argument("--type",     nargs  = '?', choices = ['url', 'bbcode','html'], default = 'url', help = "bla ...")
    parser.add_argument("--username", nargs  = 1  , help = "bla ...")
    parser.add_argument("--password", nargs  = 1  , help = "bla ...")
    parser.add_argument("file",       nargs  = '*', help = "files to upload")
    args = parser.parse_args()

    opts_dict = {}
    deletion_link = False
    nonames = False
    nolog = False
    multifile = False
    file_list = args.file
    opts_dict['link_type'] = args.type

    if args.adult:
        opts_dict['adult_content'] = 'yes'
    else:
        opts_dict['adult_content'] = 'no'
    if args.nolog:
        nolog = True
    if args.delete:
        deletion_link = True
    if args.nonames:
        nonames = True

    if not args.nolog:
        if not os.access(logfile, os.W_OK):
            raise Usage("No access to logfile - make sure ~/.postimage.log is accessible")

    try:
        content = None
        links = None
        if file_list in [[],["-"]]:
            try:
                content = sys.stdin.read()
                opts_dict['content'] = content
                links = upload(**opts_dict)
            except Exception as ex:
                raise Internal("Failed to upload from stdin")
            if links:
                handle_post(links, nonames, nolog)
            return 0
        if not multifile:
            for file_with_path in file_list:
                post = None
                try:
                    opts_dict['file_list'] = [file_with_path]
                    links = upload(**opts_dict)
                except Exception as e:
                    logger.error(item + ": failed to upload")
                    raise e
                if links:
                    handle_post(links, nonames, nolog)
            return 0
        return 2

    except Internal as ex:
        logger.error(ex.msg)
        logger.error("Some internal error occured")

    except Usage as ex:
        logger.error(ex.msg)
        logger.error("for help use --help")
        return 2

    except KeyboardInterrupt:
        logger.error("KeyboardInterrupt caught.")
        return 2

    except Exception as ex:
        traceback.print_exc()
        logger.error("This happened probably due to an invalid file or a bug in the script.")
        raise ex

if __name__ == "__main__":
        sys.exit(main())
