#!/usr/bin/python3
#   -*- coding: utf-8 -*-
#
#   Author:   Jan Christoph Uhde < linux (a) obiwahn org>
#
#   Requires: Python poster module - http://atlee.ca/software/poster/
#             BeautifulSoup - http://www.crummy.com/software/BeautifulSoup/
#
#             Debian: apt-get install python-poster python-beautifulsoup
#
help_str="""
postimage - file upload script for postimage.org

Synopsis:
    postimage [options] [filelist|-]
Options (not implemented):
    --help,  -h                      help -- this page
    --type=<type>,-t <type>          set type of returned link
                                     possible types: url, html, bbcode, bbcode2
    --nonames, -n                    disable printing of filenames
    --del, -d                        show url of upload deletion page
    --adult, -a                      flag upload as adult content
    --nolog                          disable logging to ~/.postimage.log
"""
                                                                                #
    #--username=<name>,-u <name>          username (not implemented)
    #--password=<pass>, -p <pass>         password (not implemented)

#
#   TODO:
#   more structured use of exceptions
#   upload multiple files in one go. (i'll do it if somebody requests)
#   resize option (this could be useful)
#   log into account (who needs that?!)
#
#   better modules: logger, argparse

import sys
import os
import traceback
import getopt
import urllib3 as urllib
from bs4 import BeautifulSoup

from pprint import pprint  as P
from pprint import pformat as PF
import traceback
import argparse
import logging

parser = argparse.ArgumentParser()
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logfile=os.path.expanduser("~/.postimage.log")
http = urllib.PoolManager()

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def upload(file_list=None,content=None,adult_content="no",link_type="url",username=None,passwd=None):
    """
        file_list - files read from commandline
        content   - content of one file read from stdin
    """

    if not (file_list or content):
        return (None,None)

    if file_list and content:
        logger.error("you can not read from stdin and files")
        return(None,None)

    request_url = "http://www.postimage.org/index.php"
    multipart_dict={} #fields in urllib3 terms
    multipart_dict['adult']=adult_content

    datagen=None
    headers=None

    # encode - data
    # for now the list may contain only one item
    if file_list:
        for image_file in file_list:
            with open(os.path.abspath(image_file), "rb") as fh:
                content = fh.read()
                multipart_dict['upload'] = (image_file, content, 'image')

    else: #if content
        multipart_dict['upload'] = (image_file, content, 'image')

    #encode
    request = http.request('POST', request_url, fields=multipart_dict)
    reply = request.data

    # handle reply with soup
    soup = BeautifulSoup(reply)
    parsed_soup=soup.findAll("textarea")

    if link_type == "url":
        post = parsed_soup[0].string.strip()
    elif link_type == "bbcode":
        post = parsed_soup[1].string.strip()
    elif link_type == "bbcode2":
        post = parsed_soup[2].string.strip()
    elif link_type == "html":
        post = parsed_soup[3].string.strip()

    del_link = parsed_soup[4].string.strip()

    return (post,del_link)


def handle_post(name,post,nonames,deletion_link,nolog):
    if post[0] and post[1]:
        ret_str=post[0]
        if not nonames:
            ret_str=name + ": " + ret_str
        if deletion_link:
            ret_str=ret_str + "\ndeletion link: " + post[1]
        print(ret_str)

        if not nolog:
            f = open(logfile, 'a+')
            try:
                f.write("\n".join([name,post[0],post[1],"\n"]))
            finally:
                f.close()
    else:
        pass


def main(argv=None):
    parser.add_argument("--adult",    action='store_true', help="contains adult content")
    parser.add_argument("--nolog",    action='store_true', help="increase output verbosity" )
    parser.add_argument("--nonames",  action='store_true', help="bla ...")
    parser.add_argument("--delete",   action='store_true', help="bla ...")
    parser.add_argument("--type",     nargs='?', choices=['url', 'bbcode','html'], default='url', help="bla ...")
    parser.add_argument("--username", nargs=1  , help="bla ...")
    parser.add_argument("--password", nargs=1  , help="bla ...")
    parser.add_argument("file",       nargs='*', help="files to upload")
    args = parser.parse_args()

    opts_dict = {}
    deletion_link = False
    nonames = False
    nolog = False
    multifile = False
    file_list = args.file
    opts_dict['link_type'] = args.type

    if args.adult:
        opts_dict['adult_content']='yes'
    else:
        opts_dict['adult_content']='no'

    if args.nolog:
        nolog=True

    if args.delete:
        deletion_link=True

    if args.nonames:
        nonames=True

    #opts_dict['username']=a
    #opts_dict['password']=a

    if not args.nolog:
        if not os.access(logfile, os.W_OK):
            logger.error("No access to logfile")
            return 2

    try:
        content=None
        post=None
        if file_list in [[],["-"]]:
            try:
                content=sys.stdin.read()
                opts_dict['content']=content
                post = upload(**opts_dict)
            except:
                logger.error("failed to upload from stdin")
                raise
            if post:
                handle_post("stdin",post,nonames,deletion_link,nolog)
            return 0
        if not multifile:
            for item in file_list:
                post=None
                try:
                    opts_dict['file_list']=[item]
                    post = upload(**opts_dict)
                except Exception as e:
                    logger.error(item + ": failed to upload")
                    raise e
                if post:
                    handle_post(item,post,nonames,deletion_link,nolog)
            return 0
        return 2


    except Usage as err:
        logger.error(err.msg)
        logger.error("for help use --help")
        return 2

    except KeyboardInterrupt:
        logger.error("KeyboardInterrupt caught.")
        return 2

    except Exception as e:
        traceback.print_exc()
        logger.error("This happened probably due to an invalid file or a bug in the script.")
        #raise


if __name__ == "__main__":
        sys.exit(main())
